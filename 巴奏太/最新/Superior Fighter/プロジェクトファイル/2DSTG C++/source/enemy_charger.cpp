//=============================================================================
//
// 敵派生クラス チャージャー [enemey_charger.cpp]
// Author: Sota Tomoe
//
//=============================================================================
#include "enemy_charger.h"
#include "life.h"
#include "game.h"
#include "player.h"
#include "particle.h"

//*****************************************************************************
// 敵派生クラス チャージャー ( 継承元: 敵クラス [enemy] )
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CEnemyCharger::CEnemyCharger()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CEnemyCharger::~CEnemyCharger()
{

}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CEnemyCharger::Init(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR2 size)
{
	// 初期化処理
	if (FAILED(CEnemy::Init(pos, rot, size)))
	{
		return E_FAIL;
	}

	// 行動を設定
	SetAction(ENEMY_ACTION_FOLLOW);

	// 体力を設定
	SetLife(ENEMY_CHARGER_LIFE);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CEnemyCharger::Uninit(void)
{
	CEnemy::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CEnemyCharger::Update(void)
{
	// 衝突時
	CPlayer *pPlayer = CGame::GetPlayer();
	if (GetHit()) {
		if (!pPlayer->GetDashState()) {
			CGame::GetLife()->Damage(1);
		}
		// 自爆する
		this->Damage(100);
		SetHit(true);
	}

	CEnemy::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CEnemyCharger::Draw(void)
{
	CEnemy::Draw();
}

//=============================================================================
// 生成関数
//=============================================================================
CEnemyCharger *CEnemyCharger::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR2 size)
{
	CEnemyCharger *pEnemy;
	pEnemy = new CEnemyCharger;
	if (pEnemy != NULL)
	{
		pEnemy->Init(pos, rot, size);
		pEnemy->SetTexture(ENEMY_TYPE_CHARGER);
	}

	return pEnemy;
}